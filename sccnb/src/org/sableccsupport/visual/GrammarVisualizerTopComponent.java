package org.sableccsupport.visual;

import javax.swing.JComponent;
import javax.swing.text.BadLocationException;
import javax.swing.text.Document;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.Exceptions;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;

/**
 * 
 * Top component which displays something.
 * @author verylazyboy
 * @version 
 */
@ConvertAsProperties(dtd = "-//org.sableccsupport.visual//GrammarVisualizer//EN",
autostore = false)
@TopComponent.Description(preferredID = "GrammarVisualizerTopComponent",
iconBase = "org/sableccsupport/img/depGraph.png",
persistenceType = TopComponent.PERSISTENCE_NEVER)
@TopComponent.Registration(mode = "editor", openAtStartup = false)
@ActionID(category = "Window", id = "org.sableccsupport.visual.GrammarVisualizerTopComponent")
//@ActionReference(path = "Menu/Window" /*
// * , position = 333
// */)
@TopComponent.OpenActionRegistration(displayName = "#CTL_GrammarVisualizerAction",
preferredID = "GrammarVisualizerTopComponent")
@Messages({
	"CTL_GrammarVisualizerAction=GrammarVisualizer",
	"CTL_GrammarVisualizerTopComponent=Grammar Visualizer",
	"HINT_GrammarVisualizerTopComponent=This is a Grammar Visualizer"
})
public final class GrammarVisualizerTopComponent 
	extends TopComponent implements Visualizer
{

	public GrammarVisualizerTopComponent() {
		initComponents();
		setName(Bundle.CTL_GrammarVisualizerTopComponent());
		setToolTipText(Bundle.HINT_GrammarVisualizerTopComponent());

	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tree = new javax.swing.ButtonGroup();
        mainPanel = new javax.swing.JPanel();
        graphDisplay = new javax.swing.JScrollPane();
        statusLabel = new javax.swing.JLabel();
        status = new javax.swing.JTextField();

        org.openide.awt.Mnemonics.setLocalizedText(statusLabel, org.openide.util.NbBundle.getMessage(GrammarVisualizerTopComponent.class, "GrammarVisualizerTopComponent.statusLabel.text")); // NOI18N

        status.setText(org.openide.util.NbBundle.getMessage(GrammarVisualizerTopComponent.class, "GrammarVisualizerTopComponent.status.text")); // NOI18N
        status.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                statusActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(statusLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(status, javax.swing.GroupLayout.DEFAULT_SIZE, 313, Short.MAX_VALUE))
            .addComponent(graphDisplay)
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addComponent(graphDisplay, javax.swing.GroupLayout.DEFAULT_SIZE, 241, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(statusLabel)
                    .addComponent(status, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

	private void statusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_statusActionPerformed
	}//GEN-LAST:event_statusActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane graphDisplay;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JTextField status;
    private javax.swing.JLabel statusLabel;
    private javax.swing.ButtonGroup tree;
    // End of variables declaration//GEN-END:variables
	@Override
	public void componentOpened() {
	}

	@Override
	public void componentClosed() {
	}

	void writeProperties(java.util.Properties p) {
		// better to version settings since initial version as advocated at
		// http://wiki.apidesign.org/wiki/PropertyFiles
		p.setProperty("version", "1.0");
		// TODO store your settings
	}

	void readProperties(java.util.Properties p) {
		String version = p.getProperty("version");
		// TODO read your settings according to their version
	}

	@Override
	public void replaceNewGraph(JComponent graph)
	{
		//graphDisplay.removeAll();
		graphDisplay.add(graph);
		graphDisplay.setViewportView(graph);
		graphDisplay.revalidate();
		graphDisplay.repaint();
	}

	@Override
	public void updateStatus(String status)
	{
		try {
			//this.status.getDocument().insertString(0, status, null);
			Document d = this.status.getDocument();
			d.remove(0, d.getLength());
			d.insertString(0, status, null);
		} catch (BadLocationException ex) {
			// TODO: remove printStackTrace
			ex.printStackTrace();
		}
	}
}
