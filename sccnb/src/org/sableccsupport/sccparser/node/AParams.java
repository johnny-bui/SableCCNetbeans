/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.sableccsupport.sccparser.node;

import java.util.*;
import org.sableccsupport.sccparser.analysis.*;

@SuppressWarnings("nls")
public final class AParams extends PParams
{
    private PTerm _term_;
    private final LinkedList<PParamsTail> _params_ = new LinkedList<PParamsTail>();

    public AParams()
    {
        // Constructor
    }

    public AParams(
        @SuppressWarnings("hiding") PTerm _term_,
        @SuppressWarnings("hiding") List<PParamsTail> _params_)
    {
        // Constructor
        setTerm(_term_);

        setParams(_params_);

    }

    @Override
    public Object clone()
    {
        return new AParams(
            cloneNode(this._term_),
            cloneList(this._params_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAParams(this);
    }

    public PTerm getTerm()
    {
        return this._term_;
    }

    public void setTerm(PTerm node)
    {
        if(this._term_ != null)
        {
            this._term_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._term_ = node;
    }

    public LinkedList<PParamsTail> getParams()
    {
        return this._params_;
    }

    public void setParams(List<PParamsTail> list)
    {
        this._params_.clear();
        this._params_.addAll(list);
        for(PParamsTail e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._term_)
            + toString(this._params_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._term_ == child)
        {
            this._term_ = null;
            return;
        }

        if(this._params_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._term_ == oldChild)
        {
            setTerm((PTerm) newChild);
            return;
        }

        for(ListIterator<PParamsTail> i = this._params_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PParamsTail) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}
