/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.sableccsupport.sccparser.node;

import org.sableccsupport.sccparser.analysis.*;

@SuppressWarnings("nls")
public final class ARegExpTail extends PRegExpTail
{
    private TBar _bar_;
    private PConcat _concat_;

    public ARegExpTail()
    {
        // Constructor
    }

    public ARegExpTail(
        @SuppressWarnings("hiding") TBar _bar_,
        @SuppressWarnings("hiding") PConcat _concat_)
    {
        // Constructor
        setBar(_bar_);

        setConcat(_concat_);

    }

    @Override
    public Object clone()
    {
        return new ARegExpTail(
            cloneNode(this._bar_),
            cloneNode(this._concat_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseARegExpTail(this);
    }

    public TBar getBar()
    {
        return this._bar_;
    }

    public void setBar(TBar node)
    {
        if(this._bar_ != null)
        {
            this._bar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._bar_ = node;
    }

    public PConcat getConcat()
    {
        return this._concat_;
    }

    public void setConcat(PConcat node)
    {
        if(this._concat_ != null)
        {
            this._concat_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._concat_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._bar_)
            + toString(this._concat_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._bar_ == child)
        {
            this._bar_ = null;
            return;
        }

        if(this._concat_ == child)
        {
            this._concat_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._bar_ == oldChild)
        {
            setBar((TBar) newChild);
            return;
        }

        if(this._concat_ == oldChild)
        {
            setConcat((PConcat) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
