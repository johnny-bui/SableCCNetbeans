/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.sableccsupport.sccparser.node;

import java.util.*;
import org.sableccsupport.sccparser.analysis.*;

@SuppressWarnings("nls")
public final class AListOfListTerm extends PListOfListTerm
{
    private PListTerm _listTerm_;
    private final LinkedList<PListTermTail> _listTerms_ = new LinkedList<PListTermTail>();

    public AListOfListTerm()
    {
        // Constructor
    }

    public AListOfListTerm(
        @SuppressWarnings("hiding") PListTerm _listTerm_,
        @SuppressWarnings("hiding") List<PListTermTail> _listTerms_)
    {
        // Constructor
        setListTerm(_listTerm_);

        setListTerms(_listTerms_);

    }

    @Override
    public Object clone()
    {
        return new AListOfListTerm(
            cloneNode(this._listTerm_),
            cloneList(this._listTerms_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAListOfListTerm(this);
    }

    public PListTerm getListTerm()
    {
        return this._listTerm_;
    }

    public void setListTerm(PListTerm node)
    {
        if(this._listTerm_ != null)
        {
            this._listTerm_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._listTerm_ = node;
    }

    public LinkedList<PListTermTail> getListTerms()
    {
        return this._listTerms_;
    }

    public void setListTerms(List<PListTermTail> list)
    {
        this._listTerms_.clear();
        this._listTerms_.addAll(list);
        for(PListTermTail e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._listTerm_)
            + toString(this._listTerms_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._listTerm_ == child)
        {
            this._listTerm_ = null;
            return;
        }

        if(this._listTerms_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._listTerm_ == oldChild)
        {
            setListTerm((PListTerm) newChild);
            return;
        }

        for(ListIterator<PListTermTail> i = this._listTerms_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PListTermTail) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}
