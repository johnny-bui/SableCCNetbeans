/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.sableccsupport.sccparser.node;

import org.sableccsupport.sccparser.analysis.*;

@SuppressWarnings("nls")
public final class ATokenDef extends PTokenDef
{
    private PStateList _stateList_;
    private TId _id_;
    private TEqual _equal_;
    private PRegExp _regExp_;
    private PLookAhead _lookAhead_;
    private TSemicolon _semicolon_;

    public ATokenDef()
    {
        // Constructor
    }

    public ATokenDef(
        @SuppressWarnings("hiding") PStateList _stateList_,
        @SuppressWarnings("hiding") TId _id_,
        @SuppressWarnings("hiding") TEqual _equal_,
        @SuppressWarnings("hiding") PRegExp _regExp_,
        @SuppressWarnings("hiding") PLookAhead _lookAhead_,
        @SuppressWarnings("hiding") TSemicolon _semicolon_)
    {
        // Constructor
        setStateList(_stateList_);

        setId(_id_);

        setEqual(_equal_);

        setRegExp(_regExp_);

        setLookAhead(_lookAhead_);

        setSemicolon(_semicolon_);

    }

    @Override
    public Object clone()
    {
        return new ATokenDef(
            cloneNode(this._stateList_),
            cloneNode(this._id_),
            cloneNode(this._equal_),
            cloneNode(this._regExp_),
            cloneNode(this._lookAhead_),
            cloneNode(this._semicolon_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseATokenDef(this);
    }

    public PStateList getStateList()
    {
        return this._stateList_;
    }

    public void setStateList(PStateList node)
    {
        if(this._stateList_ != null)
        {
            this._stateList_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._stateList_ = node;
    }

    public TId getId()
    {
        return this._id_;
    }

    public void setId(TId node)
    {
        if(this._id_ != null)
        {
            this._id_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._id_ = node;
    }

    public TEqual getEqual()
    {
        return this._equal_;
    }

    public void setEqual(TEqual node)
    {
        if(this._equal_ != null)
        {
            this._equal_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._equal_ = node;
    }

    public PRegExp getRegExp()
    {
        return this._regExp_;
    }

    public void setRegExp(PRegExp node)
    {
        if(this._regExp_ != null)
        {
            this._regExp_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._regExp_ = node;
    }

    public PLookAhead getLookAhead()
    {
        return this._lookAhead_;
    }

    public void setLookAhead(PLookAhead node)
    {
        if(this._lookAhead_ != null)
        {
            this._lookAhead_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lookAhead_ = node;
    }

    public TSemicolon getSemicolon()
    {
        return this._semicolon_;
    }

    public void setSemicolon(TSemicolon node)
    {
        if(this._semicolon_ != null)
        {
            this._semicolon_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._semicolon_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._stateList_)
            + toString(this._id_)
            + toString(this._equal_)
            + toString(this._regExp_)
            + toString(this._lookAhead_)
            + toString(this._semicolon_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._stateList_ == child)
        {
            this._stateList_ = null;
            return;
        }

        if(this._id_ == child)
        {
            this._id_ = null;
            return;
        }

        if(this._equal_ == child)
        {
            this._equal_ = null;
            return;
        }

        if(this._regExp_ == child)
        {
            this._regExp_ = null;
            return;
        }

        if(this._lookAhead_ == child)
        {
            this._lookAhead_ = null;
            return;
        }

        if(this._semicolon_ == child)
        {
            this._semicolon_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._stateList_ == oldChild)
        {
            setStateList((PStateList) newChild);
            return;
        }

        if(this._id_ == oldChild)
        {
            setId((TId) newChild);
            return;
        }

        if(this._equal_ == oldChild)
        {
            setEqual((TEqual) newChild);
            return;
        }

        if(this._regExp_ == oldChild)
        {
            setRegExp((PRegExp) newChild);
            return;
        }

        if(this._lookAhead_ == oldChild)
        {
            setLookAhead((PLookAhead) newChild);
            return;
        }

        if(this._semicolon_ == oldChild)
        {
            setSemicolon((TSemicolon) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
