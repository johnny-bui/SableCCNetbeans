/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.sableccsupport.sccparser.node;

import java.util.*;
import org.sableccsupport.sccparser.analysis.*;

@SuppressWarnings("nls")
public final class AAstAlts extends PAstAlts
{
    private PAstAlt _astAlt_;
    private final LinkedList<PAstAltsTail> _astAlts_ = new LinkedList<PAstAltsTail>();

    public AAstAlts()
    {
        // Constructor
    }

    public AAstAlts(
        @SuppressWarnings("hiding") PAstAlt _astAlt_,
        @SuppressWarnings("hiding") List<PAstAltsTail> _astAlts_)
    {
        // Constructor
        setAstAlt(_astAlt_);

        setAstAlts(_astAlts_);

    }

    @Override
    public Object clone()
    {
        return new AAstAlts(
            cloneNode(this._astAlt_),
            cloneList(this._astAlts_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAAstAlts(this);
    }

    public PAstAlt getAstAlt()
    {
        return this._astAlt_;
    }

    public void setAstAlt(PAstAlt node)
    {
        if(this._astAlt_ != null)
        {
            this._astAlt_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._astAlt_ = node;
    }

    public LinkedList<PAstAltsTail> getAstAlts()
    {
        return this._astAlts_;
    }

    public void setAstAlts(List<PAstAltsTail> list)
    {
        this._astAlts_.clear();
        this._astAlts_.addAll(list);
        for(PAstAltsTail e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._astAlt_)
            + toString(this._astAlts_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._astAlt_ == child)
        {
            this._astAlt_ = null;
            return;
        }

        if(this._astAlts_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._astAlt_ == oldChild)
        {
            setAstAlt((PAstAlt) newChild);
            return;
        }

        for(ListIterator<PAstAltsTail> i = this._astAlts_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PAstAltsTail) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}
