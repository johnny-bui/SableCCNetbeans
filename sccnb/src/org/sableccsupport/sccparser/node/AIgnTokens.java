/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.sableccsupport.sccparser.node;

import org.sableccsupport.sccparser.analysis.*;

@SuppressWarnings("nls")
public final class AIgnTokens extends PIgnTokens
{
    private TIgnored _ignored_;
    private TTokens _tokens_;
    private PIdList _idList_;
    private TSemicolon _semicolon_;

    public AIgnTokens()
    {
        // Constructor
    }

    public AIgnTokens(
        @SuppressWarnings("hiding") TIgnored _ignored_,
        @SuppressWarnings("hiding") TTokens _tokens_,
        @SuppressWarnings("hiding") PIdList _idList_,
        @SuppressWarnings("hiding") TSemicolon _semicolon_)
    {
        // Constructor
        setIgnored(_ignored_);

        setTokens(_tokens_);

        setIdList(_idList_);

        setSemicolon(_semicolon_);

    }

    @Override
    public Object clone()
    {
        return new AIgnTokens(
            cloneNode(this._ignored_),
            cloneNode(this._tokens_),
            cloneNode(this._idList_),
            cloneNode(this._semicolon_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAIgnTokens(this);
    }

    public TIgnored getIgnored()
    {
        return this._ignored_;
    }

    public void setIgnored(TIgnored node)
    {
        if(this._ignored_ != null)
        {
            this._ignored_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._ignored_ = node;
    }

    public TTokens getTokens()
    {
        return this._tokens_;
    }

    public void setTokens(TTokens node)
    {
        if(this._tokens_ != null)
        {
            this._tokens_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._tokens_ = node;
    }

    public PIdList getIdList()
    {
        return this._idList_;
    }

    public void setIdList(PIdList node)
    {
        if(this._idList_ != null)
        {
            this._idList_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._idList_ = node;
    }

    public TSemicolon getSemicolon()
    {
        return this._semicolon_;
    }

    public void setSemicolon(TSemicolon node)
    {
        if(this._semicolon_ != null)
        {
            this._semicolon_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._semicolon_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._ignored_)
            + toString(this._tokens_)
            + toString(this._idList_)
            + toString(this._semicolon_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._ignored_ == child)
        {
            this._ignored_ = null;
            return;
        }

        if(this._tokens_ == child)
        {
            this._tokens_ = null;
            return;
        }

        if(this._idList_ == child)
        {
            this._idList_ = null;
            return;
        }

        if(this._semicolon_ == child)
        {
            this._semicolon_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._ignored_ == oldChild)
        {
            setIgnored((TIgnored) newChild);
            return;
        }

        if(this._tokens_ == oldChild)
        {
            setTokens((TTokens) newChild);
            return;
        }

        if(this._idList_ == oldChild)
        {
            setIdList((PIdList) newChild);
            return;
        }

        if(this._semicolon_ == oldChild)
        {
            setSemicolon((TSemicolon) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
