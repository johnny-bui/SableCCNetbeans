/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.sableccsupport.sccparser.node;

import java.util.*;
import org.sableccsupport.sccparser.analysis.*;

@SuppressWarnings("nls")
public final class AProductions extends PProductions
{
    private TProductions _productions_;
    private final LinkedList<PProd> _prods_ = new LinkedList<PProd>();

    public AProductions()
    {
        // Constructor
    }

    public AProductions(
        @SuppressWarnings("hiding") TProductions _productions_,
        @SuppressWarnings("hiding") List<PProd> _prods_)
    {
        // Constructor
        setProductions(_productions_);

        setProds(_prods_);

    }

    @Override
    public Object clone()
    {
        return new AProductions(
            cloneNode(this._productions_),
            cloneList(this._prods_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAProductions(this);
    }

    public TProductions getProductions()
    {
        return this._productions_;
    }

    public void setProductions(TProductions node)
    {
        if(this._productions_ != null)
        {
            this._productions_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._productions_ = node;
    }

    public LinkedList<PProd> getProds()
    {
        return this._prods_;
    }

    public void setProds(List<PProd> list)
    {
        this._prods_.clear();
        this._prods_.addAll(list);
        for(PProd e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._productions_)
            + toString(this._prods_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._productions_ == child)
        {
            this._productions_ = null;
            return;
        }

        if(this._prods_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._productions_ == oldChild)
        {
            setProductions((TProductions) newChild);
            return;
        }

        for(ListIterator<PProd> i = this._prods_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PProd) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}
