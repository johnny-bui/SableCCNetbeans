/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.sableccsupport.sccparser.node;

import org.sableccsupport.sccparser.analysis.*;

@SuppressWarnings("nls")
public final class AProd extends PProd
{
    private TId _id_;
    private PProdTransform _prodTransform_;
    private TEqual _equal_;
    private PAlts _alts_;
    private TSemicolon _semicolon_;

    public AProd()
    {
        // Constructor
    }

    public AProd(
        @SuppressWarnings("hiding") TId _id_,
        @SuppressWarnings("hiding") PProdTransform _prodTransform_,
        @SuppressWarnings("hiding") TEqual _equal_,
        @SuppressWarnings("hiding") PAlts _alts_,
        @SuppressWarnings("hiding") TSemicolon _semicolon_)
    {
        // Constructor
        setId(_id_);

        setProdTransform(_prodTransform_);

        setEqual(_equal_);

        setAlts(_alts_);

        setSemicolon(_semicolon_);

    }

    @Override
    public Object clone()
    {
        return new AProd(
            cloneNode(this._id_),
            cloneNode(this._prodTransform_),
            cloneNode(this._equal_),
            cloneNode(this._alts_),
            cloneNode(this._semicolon_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAProd(this);
    }

    public TId getId()
    {
        return this._id_;
    }

    public void setId(TId node)
    {
        if(this._id_ != null)
        {
            this._id_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._id_ = node;
    }

    public PProdTransform getProdTransform()
    {
        return this._prodTransform_;
    }

    public void setProdTransform(PProdTransform node)
    {
        if(this._prodTransform_ != null)
        {
            this._prodTransform_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._prodTransform_ = node;
    }

    public TEqual getEqual()
    {
        return this._equal_;
    }

    public void setEqual(TEqual node)
    {
        if(this._equal_ != null)
        {
            this._equal_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._equal_ = node;
    }

    public PAlts getAlts()
    {
        return this._alts_;
    }

    public void setAlts(PAlts node)
    {
        if(this._alts_ != null)
        {
            this._alts_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._alts_ = node;
    }

    public TSemicolon getSemicolon()
    {
        return this._semicolon_;
    }

    public void setSemicolon(TSemicolon node)
    {
        if(this._semicolon_ != null)
        {
            this._semicolon_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._semicolon_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._id_)
            + toString(this._prodTransform_)
            + toString(this._equal_)
            + toString(this._alts_)
            + toString(this._semicolon_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._id_ == child)
        {
            this._id_ = null;
            return;
        }

        if(this._prodTransform_ == child)
        {
            this._prodTransform_ = null;
            return;
        }

        if(this._equal_ == child)
        {
            this._equal_ = null;
            return;
        }

        if(this._alts_ == child)
        {
            this._alts_ = null;
            return;
        }

        if(this._semicolon_ == child)
        {
            this._semicolon_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._id_ == oldChild)
        {
            setId((TId) newChild);
            return;
        }

        if(this._prodTransform_ == oldChild)
        {
            setProdTransform((PProdTransform) newChild);
            return;
        }

        if(this._equal_ == oldChild)
        {
            setEqual((TEqual) newChild);
            return;
        }

        if(this._alts_ == oldChild)
        {
            setAlts((PAlts) newChild);
            return;
        }

        if(this._semicolon_ == oldChild)
        {
            setSemicolon((TSemicolon) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
