/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.sableccsupport.sccparser.analysis;

import java.util.*;
import org.sableccsupport.sccparser.node.*;

public class AnalysisAdapter implements Analysis
{
    private Hashtable<Node,Object> in;
    private Hashtable<Node,Object> out;

    public Object getIn(Node node)
    {
        if(this.in == null)
        {
            return null;
        }

        return this.in.get(node);
    }

    public void setIn(Node node, Object o)
    {
        if(this.in == null)
        {
            this.in = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.in.put(node, o);
        }
        else
        {
            this.in.remove(node);
        }
    }

    public Object getOut(Node node)
    {
        if(this.out == null)
        {
            return null;
        }

        return this.out.get(node);
    }

    public void setOut(Node node, Object o)
    {
        if(this.out == null)
        {
            this.out = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.out.put(node, o);
        }
        else
        {
            this.out.remove(node);
        }
    }

    public void caseStart(Start node)
    {
        defaultCase(node);
    }

    public void caseAGrammar(AGrammar node)
    {
        defaultCase(node);
    }

    public void caseAPackage(APackage node)
    {
        defaultCase(node);
    }

    public void caseAPkgName(APkgName node)
    {
        defaultCase(node);
    }

    public void caseAPkgNameTail(APkgNameTail node)
    {
        defaultCase(node);
    }

    public void caseAHelpers(AHelpers node)
    {
        defaultCase(node);
    }

    public void caseAHelperDef(AHelperDef node)
    {
        defaultCase(node);
    }

    public void caseAStates(AStates node)
    {
        defaultCase(node);
    }

    public void caseAIdList(AIdList node)
    {
        defaultCase(node);
    }

    public void caseAIdListTail(AIdListTail node)
    {
        defaultCase(node);
    }

    public void caseATokens(ATokens node)
    {
        defaultCase(node);
    }

    public void caseATokenDef(ATokenDef node)
    {
        defaultCase(node);
    }

    public void caseAStateList(AStateList node)
    {
        defaultCase(node);
    }

    public void caseAStateListTail(AStateListTail node)
    {
        defaultCase(node);
    }

    public void caseATransition(ATransition node)
    {
        defaultCase(node);
    }

    public void caseAIgnTokens(AIgnTokens node)
    {
        defaultCase(node);
    }

    public void caseALookAhead(ALookAhead node)
    {
        defaultCase(node);
    }

    public void caseARegExp(ARegExp node)
    {
        defaultCase(node);
    }

    public void caseARegExpTail(ARegExpTail node)
    {
        defaultCase(node);
    }

    public void caseAConcat(AConcat node)
    {
        defaultCase(node);
    }

    public void caseAUnExp(AUnExp node)
    {
        defaultCase(node);
    }

    public void caseACharBasic(ACharBasic node)
    {
        defaultCase(node);
    }

    public void caseASetBasic(ASetBasic node)
    {
        defaultCase(node);
    }

    public void caseAStringBasic(AStringBasic node)
    {
        defaultCase(node);
    }

    public void caseAIdBasic(AIdBasic node)
    {
        defaultCase(node);
    }

    public void caseARegExpBasic(ARegExpBasic node)
    {
        defaultCase(node);
    }

    public void caseACharChar(ACharChar node)
    {
        defaultCase(node);
    }

    public void caseADecChar(ADecChar node)
    {
        defaultCase(node);
    }

    public void caseAHexChar(AHexChar node)
    {
        defaultCase(node);
    }

    public void caseAOperationSet(AOperationSet node)
    {
        defaultCase(node);
    }

    public void caseAIntervalSet(AIntervalSet node)
    {
        defaultCase(node);
    }

    public void caseAStarUnOp(AStarUnOp node)
    {
        defaultCase(node);
    }

    public void caseAQMarkUnOp(AQMarkUnOp node)
    {
        defaultCase(node);
    }

    public void caseAPlusUnOp(APlusUnOp node)
    {
        defaultCase(node);
    }

    public void caseAPlusBinOp(APlusBinOp node)
    {
        defaultCase(node);
    }

    public void caseAMinusBinOp(AMinusBinOp node)
    {
        defaultCase(node);
    }

    public void caseAProductions(AProductions node)
    {
        defaultCase(node);
    }

    public void caseAProd(AProd node)
    {
        defaultCase(node);
    }

    public void caseAProdTransform(AProdTransform node)
    {
        defaultCase(node);
    }

    public void caseAAlts(AAlts node)
    {
        defaultCase(node);
    }

    public void caseAAltsTail(AAltsTail node)
    {
        defaultCase(node);
    }

    public void caseAAlt(AAlt node)
    {
        defaultCase(node);
    }

    public void caseAAltTransform(AAltTransform node)
    {
        defaultCase(node);
    }

    public void caseANewTerm(ANewTerm node)
    {
        defaultCase(node);
    }

    public void caseAListTerm(AListTerm node)
    {
        defaultCase(node);
    }

    public void caseASimpleTerm(ASimpleTerm node)
    {
        defaultCase(node);
    }

    public void caseANullTerm(ANullTerm node)
    {
        defaultCase(node);
    }

    public void caseAListOfListTerm(AListOfListTerm node)
    {
        defaultCase(node);
    }

    public void caseANewListTerm(ANewListTerm node)
    {
        defaultCase(node);
    }

    public void caseASimpleListTerm(ASimpleListTerm node)
    {
        defaultCase(node);
    }

    public void caseAListTermTail(AListTermTail node)
    {
        defaultCase(node);
    }

    public void caseASimpleTermTail(ASimpleTermTail node)
    {
        defaultCase(node);
    }

    public void caseAProdName(AProdName node)
    {
        defaultCase(node);
    }

    public void caseAProdNameTail(AProdNameTail node)
    {
        defaultCase(node);
    }

    public void caseAParams(AParams node)
    {
        defaultCase(node);
    }

    public void caseAParamsTail(AParamsTail node)
    {
        defaultCase(node);
    }

    public void caseAAltName(AAltName node)
    {
        defaultCase(node);
    }

    public void caseAElem(AElem node)
    {
        defaultCase(node);
    }

    public void caseAElemName(AElemName node)
    {
        defaultCase(node);
    }

    public void caseATokenSpecifier(ATokenSpecifier node)
    {
        defaultCase(node);
    }

    public void caseAProductionSpecifier(AProductionSpecifier node)
    {
        defaultCase(node);
    }

    public void caseAAst(AAst node)
    {
        defaultCase(node);
    }

    public void caseAAstProd(AAstProd node)
    {
        defaultCase(node);
    }

    public void caseAAstAlts(AAstAlts node)
    {
        defaultCase(node);
    }

    public void caseAAstAltsTail(AAstAltsTail node)
    {
        defaultCase(node);
    }

    public void caseAAstAlt(AAstAlt node)
    {
        defaultCase(node);
    }

    public void caseTPkgId(TPkgId node)
    {
        defaultCase(node);
    }

    public void caseTPackage(TPackage node)
    {
        defaultCase(node);
    }

    public void caseTStates(TStates node)
    {
        defaultCase(node);
    }

    public void caseTHelpers(THelpers node)
    {
        defaultCase(node);
    }

    public void caseTTokens(TTokens node)
    {
        defaultCase(node);
    }

    public void caseTIgnored(TIgnored node)
    {
        defaultCase(node);
    }

    public void caseTProductions(TProductions node)
    {
        defaultCase(node);
    }

    public void caseTAbstract(TAbstract node)
    {
        defaultCase(node);
    }

    public void caseTSyntax(TSyntax node)
    {
        defaultCase(node);
    }

    public void caseTTree(TTree node)
    {
        defaultCase(node);
    }

    public void caseTNew(TNew node)
    {
        defaultCase(node);
    }

    public void caseTNull(TNull node)
    {
        defaultCase(node);
    }

    public void caseTTokenSpecifier(TTokenSpecifier node)
    {
        defaultCase(node);
    }

    public void caseTProductionSpecifier(TProductionSpecifier node)
    {
        defaultCase(node);
    }

    public void caseTDot(TDot node)
    {
        defaultCase(node);
    }

    public void caseTDDot(TDDot node)
    {
        defaultCase(node);
    }

    public void caseTSemicolon(TSemicolon node)
    {
        defaultCase(node);
    }

    public void caseTEqual(TEqual node)
    {
        defaultCase(node);
    }

    public void caseTLBkt(TLBkt node)
    {
        defaultCase(node);
    }

    public void caseTRBkt(TRBkt node)
    {
        defaultCase(node);
    }

    public void caseTLPar(TLPar node)
    {
        defaultCase(node);
    }

    public void caseTRPar(TRPar node)
    {
        defaultCase(node);
    }

    public void caseTLBrace(TLBrace node)
    {
        defaultCase(node);
    }

    public void caseTRBrace(TRBrace node)
    {
        defaultCase(node);
    }

    public void caseTPlus(TPlus node)
    {
        defaultCase(node);
    }

    public void caseTMinus(TMinus node)
    {
        defaultCase(node);
    }

    public void caseTQMark(TQMark node)
    {
        defaultCase(node);
    }

    public void caseTStar(TStar node)
    {
        defaultCase(node);
    }

    public void caseTBar(TBar node)
    {
        defaultCase(node);
    }

    public void caseTComma(TComma node)
    {
        defaultCase(node);
    }

    public void caseTSlash(TSlash node)
    {
        defaultCase(node);
    }

    public void caseTArrow(TArrow node)
    {
        defaultCase(node);
    }

    public void caseTColon(TColon node)
    {
        defaultCase(node);
    }

    public void caseTId(TId node)
    {
        defaultCase(node);
    }

    public void caseTChar(TChar node)
    {
        defaultCase(node);
    }

    public void caseTDecChar(TDecChar node)
    {
        defaultCase(node);
    }

    public void caseTHexChar(THexChar node)
    {
        defaultCase(node);
    }

    public void caseTString(TString node)
    {
        defaultCase(node);
    }

    public void caseTBlank(TBlank node)
    {
        defaultCase(node);
    }

    public void caseTComment(TComment node)
    {
        defaultCase(node);
    }

    public void caseEOF(EOF node)
    {
        defaultCase(node);
    }

    public void defaultCase(@SuppressWarnings("unused") Node node)
    {
        // do nothing
    }
}
